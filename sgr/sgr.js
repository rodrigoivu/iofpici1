const tf = require('@tensorflow/tfjs');
// require('@tensorflow/tfjs-node');



// Define a model for linear regression.
const model = tf.sequential();
model.add(tf.layers.dense({units: 64, activation: 'tanh', inputShape: [2]}));
model.add(tf.layers.dense({units: 64, activation: 'tanh'}));
model.add(tf.layers.dense({units: 1}));

// model.add(tf.layers.dense({units: 1, inputShape: [2]}));

model.compile({loss: 'meanSquaredError', optimizer: 'adam'});

// Generate some synthetic data for training.

const xs = tf.tensor2d([
    [	11	,	0.17	],
    [	11	,	0.3	],
    [	11	,	0.7	],
    [	11	,	1.5	],
    [	11	,	2	],
    [	11	,	2.5	],
    [	11	,	3	],
    [	11	,	3.5	],
    [	11	,	4	],
    [	11	,	4.5	],
    [	11	,	5	],
    [	11	,	6	],
    [	11	,	7	],
    [	11	,	8	],
    [	11	,	9	],
    [	11	,	10	],
    [	11	,	12	],
    [	11	,	14	],
    [	11	,	16	],
    [	11	,	18	],
    [	11	,	20	],
    [	11	,	25	],
    [	11	,	30	],
    [	11	,	35	],
    [	11	,	40	],
    [	11	,	45	],
    [	11	,	50	],
    [	11	,	55	],
    [	11	,	60	],
    [	11	,	65	],
    [	11	,	70	],
    [	12	,	0.17	],
    [	12	,	0.3	],
    [	12	,	0.7	],
    [	12	,	1.5	],
    [	12	,	2	],
    [	12	,	2.5	],
    [	12	,	3	],
    [	12	,	3.5	],
    [	12	,	4	],
    [	12	,	4.5	],
    [	12	,	5	],
    [	12	,	6	],
    [	12	,	7	],
    [	12	,	8	],
    [	12	,	9	],
    [	12	,	10	],
    [	12	,	12	],
    [	12	,	14	],
    [	12	,	16	],
    [	12	,	18	],
    [	12	,	20	],
    [	12	,	25	],
    [	12	,	30	],
    [	12	,	35	],
    [	12	,	40	],
    [	12	,	45	],
    [	12	,	50	],
    [	12	,	55	],
    [	12	,	60	],
    [	12	,	65	],
    [	12	,	70	],
    [	13	,	0.17	],
    [	13	,	0.3	],
    [	13	,	0.7	],
    [	13	,	1.5	],
    [	13	,	2	],
    [	13	,	2.5	],
    [	13	,	3	],
    [	13	,	3.5	],
    [	13	,	4	],
    [	13	,	4.5	],
    [	13	,	5	],
    [	13	,	6	],
    [	13	,	7	],
    [	13	,	8	],
    [	13	,	9	],
    [	13	,	10	],
    [	13	,	12	],
    [	13	,	14	],
    [	13	,	16	],
    [	13	,	18	],
    [	13	,	20	],
    [	13	,	25	],
    [	13	,	30	],
    [	13	,	35	],
    [	13	,	40	],
    [	13	,	45	],
    [	13	,	50	],
    [	13	,	55	],
    [	13	,	60	],
    [	13	,	65	],
    [	14	,	70	],
    [	14	,	0.17	],
    [	14	,	0.3	],
    [	14	,	0.7	],
    [	14	,	1.5	],
    [	14	,	2	],
    [	14	,	2.5	],
    [	14	,	3	],
    [	14	,	3.5	],
    [	14	,	4	],
    [	14	,	4.5	],
    [	14	,	5	],
    [	14	,	6	],
    [	14	,	7	],
    [	14	,	8	],
    [	14	,	9	],
    [	14	,	10	],
    [	14	,	12	],
    [	14	,	14	],
    [	14	,	16	],
    [	14	,	18	],
    [	14	,	20	],
    [	14	,	25	],
    [	14	,	30	],
    [	14	,	35	],
    [	14	,	40	],
    [	14	,	45	],
    [	14	,	50	],
    [	14	,	55	],
    [	14	,	60	],
    [	14	,	65	],
    [	14	,	70	],
    [	15	,	0.17	],
    [	15	,	0.3	],
    [	15	,	0.7	],
    [	15	,	1.5	],
    [	15	,	2	],
    [	15	,	2.5	],
    [	15	,	3	],
    [	15	,	3.5	],
    [	15	,	4	],
    [	15	,	4.5	],
    [	15	,	5	],
    [	15	,	6	],
    [	15	,	7	],
    [	15	,	8	],
    [	15	,	9	],
    [	15	,	10	],
    [	15	,	12	],
    [	15	,	14	],
    [	15	,	16	],
    [	15	,	18	],
    [	15	,	20	],
    [	15	,	25	],
    [	15	,	30	],
    [	15	,	35	],
    [	15	,	40	],
    [	15	,	45	],
    [	15	,	50	],
    [	15	,	55	],
    [	15	,	60	],
    [	15	,	65	],
    [	15	,	70	],
    [	16	,	0.17	],
    [	16	,	0.3	],
    [	16	,	0.7	],
    [	16	,	1.5	],
    [	16	,	2	],
    [	16	,	2.5	],
    [	16	,	3	],
    [	16	,	3.5	],
    [	16	,	4	],
    [	16	,	4.5	],
    [	16	,	5	],
    [	16	,	6	],
    [	16	,	7	],
    [	16	,	8	],
    [	16	,	9	],
    [	16	,	10	],
    [	16	,	12	],
    [	16	,	14	],
    [	16	,	16	],
    [	16	,	18	],
    [	16	,	20	],
    [	16	,	25	],
    [	16	,	30	],
    [	16	,	35	],
    [	16	,	40	],
    [	16	,	45	],
    [	16	,	50	],
    [	16	,	55	],
    [	16	,	60	],
    [	16	,	65	],
    [	16	,	70	],
    [	17	,	0.17	],
    [	17	,	0.3	],
    [	17	,	0.7	],
    [	17	,	1.5	],
    [	17	,	2	],
    [	17	,	2.5	],
    [	17	,	3	],
    [	17	,	3.5	],
    [	17	,	4	],
    [	17	,	4.5	],
    [	17	,	5	],
    [	17	,	6	],
    [	17	,	7	],
    [	17	,	8	],
    [	17	,	9	],
    [	17	,	10	],
    [	17	,	12	],
    [	17	,	14	],
    [	17	,	16	],
    [	17	,	18	],
    [	17	,	20	],
    [	17	,	25	],
    [	17	,	30	],
    [	17	,	35	],
    [	17	,	40	],
    [	17	,	45	],
    [	17	,	50	],
    [	17	,	55	],
    [	17	,	60	],
    [	17	,	65	],
    [	17	,	70	],
    [	18	,	0.17	],
    [	18	,	0.3	],
    [	18	,	0.7	],
    [	18	,	1.5	],
    [	18	,	2	],
    [	18	,	2.5	],
    [	18	,	3	],
    [	18	,	3.5	],
    [	18	,	4	],
    [	18	,	4.5	],
    [	18	,	5	],
    [	18	,	6	],
    [	18	,	7	],
    [	18	,	8	],
    [	18	,	9	],
    [	18	,	10	],
    [	18	,	12	],
    [	18	,	14	],
    [	18	,	16	],
    [	18	,	18	],
    [	18	,	20	],
    [	18	,	25	],
    [	18	,	30	],
    [	18	,	35	],
    [	18	,	40	],
    [	18	,	45	],
    [	18	,	50	],
    [	18	,	55	],
    [	18	,	60	],
    [	18	,	65	],
    [	18	,	70	],
    

], [248, 2]);
const ys = tf.tensor2d([
    6.07	,
    5.37	,
    4.40	,
    3.63	,
    3.35	,
    3.15	,
    2.99	,
    2.86	,
    2.75	,
    2.66	,
    2.57	,
    2.43	,
    2.32	,
    2.22	,
    2.14	,
    2.06	,
    1.94	,
    1.84	,
    1.76	,
    1.69	,
    1.63	,
    1.60	,
    1.56	,
    1.51	,
    1.47	,
    1.43	,
    1.39	,
    1.35	,
    1.31	,
    1.27	,
    1.19	,
    7.06	,
    6.24	,
    5.12	,
    4.22	,
    3.91	,
    3.67	,
    3.49	,
    3.34	,
    3.21	,
    3.10	,
    3.00	,
    2.84	,
    2.71	,
    2.59	,
    2.50	,
    2.41	,
    2.27	,
    2.16	,
    2.06	,
    1.98	,
    1.91	,
    1.84	,
    1.78	,
    1.74	,
    1.69	,
    1.62	,
    1.54	,
    1.47	,
    1.34	,
    1.28	,
    1.20	,
    7.82	,
    6.92	,
    5.68	,
    4.69	,
    4.34	,
    4.08	,
    3.88	,
    3.71	,
    3.57	,
    3.45	,
    3.34	,
    3.16	,
    3.01	,
    2.89	,
    2.78	,
    2.69	,
    2.53	,
    2.41	,
    2.30	,
    2.21	,
    2.13	,
    1.97	,
    1.86	,
    1.81	,
    1.76	,
    1.69	,
    1.61	,
    1.54	,
    1.41	,
    1.35	,
    1.24	,
    8.26	,
    7.31	,
    6.01	,
    4.96	,
    4.60	,
    4.32	,
    4.11	,
    3.93	,
    3.78	,
    3.65	,
    3.54	,
    3.35	,
    3.20	,
    3.07	,
    2.95	,
    2.85	,
    2.69	,
    2.56	,
    2.44	,
    2.35	,
    2.26	,
    2.10	,
    1.95	,
    1.90	,
    1.85	,
    1.78	,
    1.70	,
    1.63	,
    1.50	,
    1.44	,
    1.30	,
    8.34	,
    7.38	,
    6.07	,
    5.02	,
    4.65	,
    4.37	,
    4.16	,
    3.98	,
    3.83	,
    3.70	,
    3.59	,
    3.39	,
    3.24	,
    3.11	,
    2.99	,
    2.89	,
    2.73	,
    2.59	,
    2.48	,
    2.38	,
    2.30	,
    2.13	,
    2.04	,
    1.97	,
    1.91	,
    1.85	,
    1.78	,
    1.71	,
    1.61	,
    1.53	,
    1.42	,
    8.11	,
    7.18	,
    5.91	,
    4.88	,
    4.53	,
    4.26	,
    4.05	,
    3.88	,
    3.73	,
    3.61	,
    3.50	,
    3.31	,
    3.16	,
    3.03	,
    2.92	,
    2.83	,
    2.66	,
    2.53	,
    2.42	,
    2.33	,
    2.25	,
    2.08	,
    2.06	,
    2.02	,
    1.97	,
    1.91	,
    1.85	,
    1.78	,
    1.70	,
    1.62	,
    1.52	,
    7.66	,
    6.79	,
    5.59	,
    4.62	,
    4.28	,
    4.03	,
    3.83	,
    3.67	,
    3.53	,
    3.42	,
    3.31	,
    3.14	,
    2.99	,
    2.87	,
    2.77	,
    2.68	,
    2.53	,
    2.40	,
    2.30	,
    2.21	,
    2.14	,
    1.98	,
    1.92	,
    1.86	,
    1.80	,
    1.74	,
    1.68	,
    1.62	,
    1.56	,
    1.52	,
    1.48	,
    7.11	,
    6.29	,
    5.18	,
    4.29	,
    3.98	,
    3.75	,
    3.56	,
    3.41	,
    3.28	,
    3.17	,
    3.08	,
    2.92	,
    2.78	,
    2.67	,
    2.58	,
    2.49	,
    2.35	,
    2.24	,
    2.14	,
    2.06	,
    1.99	,
    1.85	,
    1.79	,
    1.73	,
    1.67	,
    1.61	,
    1.55	,
    1.51	,
    1.47	,
    1.43	,
    1.39	

   

], [248, 1]);

// // Train the model using the data.
// model.fit(xs, ys, {epochs: 1000}).then(() => {
//   // Use the model to do inference on a data point the model hasn't seen before:
//   // model.predict(tf.tensor2d([5,5], [1, 2])).print();
//    Y = model.predict(tf.tensor2d([11,3], [1, 2]));
//    console.log(Y.dataSync()[0]);
//   // Open the browser devtools to see the output
// });

model.fit(xs, ys, {
    epochs: 2000,
    callbacks: {
      onEpochEnd: (epoch, log) => 
        {   
            if (epoch==1){
                console.log('Entrenendo modelo SGR...');
            }
            if (epoch==99 || epoch==499 || epoch==999 || epoch==1499 || epoch==1999) {
                console.log(`Epoch ${epoch}: loss = ${log.loss}`)
            }
            
        }
        
    }
  }).then(async()=>{

   console.log('Modelo SGR Entrenado');

    let y=[
        [	18	,	0.17	,	7.11	],
        [	18	,	0.3	,	6.29	],
        [	18	,	0.7	,	5.18	],
        [	18	,	1.5	,	4.29	],
        [	18	,	2	,	3.98	],
        [	18	,	2.5	,	3.75	],
        [	18	,	3	,	3.56	],
        [	18	,	3.5	,	3.41	],
        [	18	,	4	,	3.28	],
        [	18	,	4.5	,	3.17	],
        [	18	,	5	,	3.08	],
        [	18	,	6	,	2.92	],
        [	18	,	7	,	2.78	],
        [	18	,	8	,	2.67	],
        [	18	,	9	,	2.58	],
        [	18	,	10	,	2.49	],
        [	18	,	12	,	2.35	],
        [	18	,	14	,	2.24	],
        [	18	,	16	,	2.14	],
        [	18	,	18	,	2.06	],
        [	18	,	20	,	1.99	],
        [	18	,	25	,	1.85	],
        [	18	,	30	,	1.79	],
        [	18	,	35	,	1.73	],
        [	18	,	40	,	1.67	],
        [	18	,	45	,	1.61	],
        [	18	,	50	,	1.55	],
        [	18	,	55	,	1.51	],
        [	18	,	60	,	1.47	],
        [	18	,	65	,	1.43	],
        [	18	,	70	,	1.39	],
    ];
    
    // for (let index = 0; index < y.length; index++) {
    //     let Y1 = model.predict(tf.tensor2d([y[index][0],y[index][1]], [1, 2]));//6.07
    //     console.log(Y1.dataSync()[0]);
    //     // err =100* (y1[2]-Y1.dataSync()[0])/y1[2];
    //     // console.log('err:' + err +'%');
        
    // }
    

    
    
  });

const estimaSGR = (temp,peso) =>{
    let sgr_t =  model.predict(tf.tensor2d([temp,peso], [1, 2]));
    let sgr_e = sgr_t.dataSync()[0];
    return sgr_e;
}

module.exports = {
    estimaSGR
};
